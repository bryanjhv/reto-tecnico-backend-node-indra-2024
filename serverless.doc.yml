documentation:
  version: '1'
  title: Reto Técnico Backend Node Indra 2024
  description: API implementada para el reto técnico de backend en Indra 2024.
  models:
    - name: CreateUsuarioRequest
      description: Datos para crear un usuario.
      contentType: application/json
      schema:
        type: object
        properties:
          correo:
            type: string
            description: Correo del usuario.
          clave:
            type: string
            description: Clave del usuario.
          nombre:
            type: string
            description: Nombre del usuario.

endpoints:
  # Listar planetas
  listPlanetas:
    summary: Listar planetas
    description: Lista los planetas de SWAPI.
    queryParams:
      - name: page
        description: Número de página.
        schema:
          type: string
          pattern: '^[0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Lista de planetas.
      - statusCode: 404
        responseBody:
          description: No se encontró la página.
  # Obtener planeta
  findPlaneta:
    summary: Obtener planeta
    description: Obtiene un planeta de SWAPI.
    pathParams:
      - name: id
        description: ID del planeta.
        schema:
          type: string
          pattern: '^[0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Planeta encontrado.
      - statusCode: 404
        responseBody:
          description: Planeta no encontrado.
  # Listar vehículos
  listVehiculos:
    summary: Listar vehículos
    description: Lista los vehículos de SWAPI.
    queryParams:
      - name: page
        description: Número de página.
        schema:
          type: string
          pattern: '^[0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Lista de vehículos.
      - statusCode: 404
        responseBody:
          description: No se encontró la página.
  # Obtener vehículo
  findVehiculo:
    summary: Obtener vehículo
    description: Obtiene un vehículo de SWAPI.
    pathParams:
      - name: id
        description: ID del vehículo.
        schema:
          type: string
          pattern: '^[0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Vehículo encontrado.
      - statusCode: 404
        responseBody:
          description: Vehículo no encontrado.
  # Listar usuarios
  listUsuarios:
    summary: Listar usuarios
    description: Lista los usuarios de la API.
    queryParams:
      - name: page
        description: Número de página.
        schema:
          type: string
          pattern: '^[0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Lista de usuarios.
      - statusCode: 404
        responseBody:
          description: No se encontró la página.
  # Obtener usuario
  findUsuario:
    summary: Obtener usuario
    description: Obtiene un usuario de la API.
    pathParams:
      - name: id
        description: ID del usuario.
        schema:
          type: string
          pattern: '^[-a-z0-9]+$'
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Usuario encontrado.
      - statusCode: 404
        responseBody:
          description: Usuario no encontrado.
  # Crear usuario
  createUsuario:
    summary: Crear usuario
    description: Crea un usuario en la API.
    requestBody:
      description: Datos del usuario.
      required: true
    requestModels:
      application/json: CreateUsuarioRequest
    methodResponses:
      - statusCode: 200
        responseBody:
          description: Usuario creado.
      - statusCode: 400
        responseBody:
          description: Datos inválidos.
